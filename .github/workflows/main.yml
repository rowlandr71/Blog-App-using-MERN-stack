name: Build and Deploy to EKS

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: us-east-1                  # set this to your preferred AWS region, e.g. us-west-1
  BACKEND_ECR_REPOSITORY: 362231138751.dkr.ecr.us-east-1.amazonaws.com/blogapp-backend:latest
  FRONTEND_ECR_REPOSITORY: 362231138751.dkr.ecr.us-east-1.amazonaws.com/blogapp-frontend:latest

permissions:
  contents: read
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: install kubectl
      run: |
        snap install kubectl --classic
        kubectl version --client

    - name: Configure AWS credentials for kubectl
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG ./client/Dockerfile
        docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG
        docker build -t $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG ./server/Dockerfile
        docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --name tech-eks --region $AWS_REGION
        kubectl apply -f your-kubernetes-manifests.yaml
